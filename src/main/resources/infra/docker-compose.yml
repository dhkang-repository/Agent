# docker-compose.yml
services:
  # ---------------------------
  # Zookeeper (Bitnami - ARM 네이티브)
  # ---------------------------
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"    # 로컬 개발 편의
      ZOO_TICK_TIME: "2000"
      ZOO_4LW_COMMANDS_WHITELIST: "ruok,stat,srvr,mntr"
    ports:
      - "2181:2181"
    # healthcheck에 nc가 없을 수 있어 일단 제거(선택)
    # healthcheck:
    #   test: ["CMD-SHELL", "echo ruok | nc -w 2 127.0.0.1 2181 | grep imok || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 10
    volumes:
      - ./zookeeper_data:/bitnami/zookeeper   # ← Bitnami 경로 다름

  kafka:
    image: confluentinc/cp-kafka:7.1.15
    container_name: kafka
    platform: linux/amd64        # Apple Silicon에서 amd64 에뮬
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_started    # healthcheck 제거했으니 started로
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"

      # 내부/외부 리스너 분리
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_LISTENERS: "INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092"
      KAFKA_ADVERTISED_LISTENERS: "INSIDE://kafka:9092,OUTSIDE://localhost:29092"
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_LOG_RETENTION_HOURS: 168
    healthcheck:
      test: ["CMD-SHELL", "unset JMX_PORT; kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./kafka_data:/var/lib/kafka/data

  redis:
    image: redis:latest
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./redis_data:/data

  db:
    image: mysql:8.4
    container_name: my-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:?set in .env}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-app}
      MYSQL_USER: ${MYSQL_USER:-app}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-app_pw}
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -p$$MYSQL_ROOT_PASSWORD || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql_data:
  kafka_data:
  zookeeper_data:
  redis_data:
